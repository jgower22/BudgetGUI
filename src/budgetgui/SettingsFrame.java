/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package budgetgui;

import com.formdev.flatlaf.FlatDarkLaf;
import com.formdev.flatlaf.FlatLightLaf;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.prefs.Preferences;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

/**
 *
 * @author jacksongower
 */
public class SettingsFrame extends javax.swing.JFrame {

    private ArrayList<String> categories = new ArrayList<>();
    private ArrayList<String> categoryLimits = new ArrayList<>();
    private double defaultLimit = 0.0;
    private boolean isDarkMode = false;
    private static final String DARK_MODE_PREF_KEY = "darkModeEnabled";
    private Preferences prefs;
    private boolean isFrameVisible = true;

    /**
     * Creates new form SettingsFrame
     */
    public SettingsFrame() {
        initComponents();

        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(dim.width / 2 - this.getSize().width / 2, dim.height / 2 - this.getSize().height / 2);

        this.setVisible(true);
        this.setTitle("Budget Tracker");
        this.setResizable(false);

        prefs = Preferences.userNodeForPackage(SettingsFrame.class);
        isDarkMode = prefs.getBoolean(DARK_MODE_PREF_KEY, false);

        if (isDarkMode) {
            displayDarkMode();
        } else {
            displayLightMode();
        }

    }

    /**
     * Placeholder for SettingsFrame, does nothing
     * @param isFrameVisible
     */
    public SettingsFrame(boolean isFrameVisible) {
        this.isFrameVisible= isFrameVisible;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        viewCategoriesButton = new javax.swing.JButton();
        addCategoryButton = new javax.swing.JButton();
        removeCategoryButton = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();
        editLimitButton = new javax.swing.JButton();
        viewLimitsButton = new javax.swing.JButton();
        findDuplicatesButton = new javax.swing.JButton();
        importTipsButton = new javax.swing.JButton();
        titleLabel = new javax.swing.JLabel();
        editCategoryButton = new javax.swing.JButton();
        lightDarkModeButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        viewCategoriesButton.setText("View Categories");
        viewCategoriesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewCategoriesButtonActionPerformed(evt);
            }
        });

        addCategoryButton.setText("Add Category");
        addCategoryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCategoryButtonActionPerformed(evt);
            }
        });

        removeCategoryButton.setText("Remove Category");
        removeCategoryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeCategoryButtonActionPerformed(evt);
            }
        });

        exitButton.setText("Exit");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        editLimitButton.setText("Edit Limit");
        editLimitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editLimitButtonActionPerformed(evt);
            }
        });

        viewLimitsButton.setText("View Limits");
        viewLimitsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewLimitsButtonActionPerformed(evt);
            }
        });

        findDuplicatesButton.setText("Find Duplicates");
        findDuplicatesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findDuplicatesButtonActionPerformed(evt);
            }
        });

        importTipsButton.setText("Tips for Importing");
        importTipsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importTipsButtonActionPerformed(evt);
            }
        });

        titleLabel.setFont(new java.awt.Font("Lucida Grande", 1, 17)); // NOI18N
        titleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleLabel.setText("Settings");

        editCategoryButton.setText("Edit Category Name");
        editCategoryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editCategoryButtonActionPerformed(evt);
            }
        });

        lightDarkModeButton.setText("Dark Mode");
        lightDarkModeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lightDarkModeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(124, 124, 124)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(viewCategoriesButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(editLimitButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(viewLimitsButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(addCategoryButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(importTipsButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 203, Short.MAX_VALUE)
                    .addComponent(findDuplicatesButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(editCategoryButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(removeCategoryButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(lightDarkModeButton, javax.swing.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE)
                .addGap(23, 23, 23)
                .addComponent(titleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addComponent(exitButton, javax.swing.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(exitButton)
                        .addGroup(layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(titleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE)))
                    .addComponent(lightDarkModeButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(viewCategoriesButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addCategoryButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(removeCategoryButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(editCategoryButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(viewLimitsButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(editLimitButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(findDuplicatesButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(importTipsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(41, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void viewCategoriesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewCategoriesButtonActionPerformed
        // TODO add your handling code here:
        getCategories();

        if (categories.isEmpty()) {
            JOptionPane.showMessageDialog(null, "You have added no categories.");
            return;
        }

        Collections.sort(categories);

        String output = "";
        for (String s : categories) {
            output += s + "\n";
        }

        JOptionPane.showMessageDialog(null, output);
    }//GEN-LAST:event_viewCategoriesButtonActionPerformed

    private void addCategoryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCategoryButtonActionPerformed
        // TODO add your handling code here:
        //Ask for new category until valid
        String newCategory = "";
        while (true) {
            newCategory = JOptionPane.showInputDialog("Enter a new category:");
            if (newCategory == null) {
                return;
            }

            newCategory = newCategory.toUpperCase().trim();

            if (newCategory.equalsIgnoreCase("INCOME") || newCategory.equalsIgnoreCase("UNCATEGORIZED")
                    || newCategory.equalsIgnoreCase("ALL")) {
                JOptionPane.showMessageDialog(null, "Error: Category Name Is Not Allowed.");
                continue;
            }

            if (newCategory.equals("")) {
                JOptionPane.showMessageDialog(null, "Invalid input. Please try again.");
                continue;
            }

            if (newCategory.indexOf("--") != -1) {
                JOptionPane.showMessageDialog(null, "-- is not allowed to be used.");
                continue;
            }

            if (categories.contains(newCategory)) {
                JOptionPane.showMessageDialog(null, newCategory + " has already been added. Please try again.");
                continue;
            }
            break;
        }
        addCategory(newCategory, true);
        categories.add(newCategory);
        JOptionPane.showMessageDialog(null, newCategory + " added successfully.");
    }//GEN-LAST:event_addCategoryButtonActionPerformed

    private void removeCategoryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeCategoryButtonActionPerformed
        // TODO add your handling code here:
        String categoryToRemove = "";
        getCategories();
        Collections.sort(categories);
        System.out.println("CATEGORIES: " + categories);
        if (categories == null) {
            JOptionPane.showMessageDialog(null, "Error 405");
            return;
        }

        //If no categories have been added, return
        if (categories.isEmpty()) {
            JOptionPane.showMessageDialog(null, "You have added no categories.");
            return;
        } else {
            //Convert categories array list to array
            String[] categoriesArr = new String[categories.size()];

            int index = 0;
            for (String s : categories) {
                categoriesArr[index] = s;
                index++;
            }

            //Ask for category
            Object[] categoriesObjArr = categoriesArr;
            Object selection = JOptionPane.showInputDialog(null,
                    "Select a Category to Remove", "Categories",
                    JOptionPane.INFORMATION_MESSAGE, null,
                    categoriesObjArr, categoriesObjArr[0]);
            categoryToRemove = (String) selection;

            if (categoryToRemove == null) {
                return;
            }
        }

        categoryToRemove = categoryToRemove.toUpperCase();

        getCategories();
        if (categories.contains(categoryToRemove)) {
            categories.remove(categoryToRemove);
            removeCategoryLimit(categoryToRemove);
            updateCategoriesTextFile();
            updateTransactionsWithCategory(categoryToRemove, "UNCATEGORIZED");
            JOptionPane.showMessageDialog(null, categoryToRemove + " successfully removed.");
        } else {
            JOptionPane.showMessageDialog(null, categoryToRemove + " not found.");
        }
    }//GEN-LAST:event_removeCategoryButtonActionPerformed

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        // TODO add your handling code here:
        this.dispose();
        YearFrame yearFrame = new YearFrame();
    }//GEN-LAST:event_exitButtonActionPerformed

    private void viewLimitsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewLimitsButtonActionPerformed
        // TODO add your handling code here:
        getCategoryLimits();

        if (categoryLimits.isEmpty()) {
            JOptionPane.showMessageDialog(null, "You have added no categories.");
            return;
        }

        double totalBudgetLimit = 0.0;

        //Add $ symbol
        ArrayList<String> categoryLimitsOutput = new ArrayList<>();

        DecimalFormat df = new DecimalFormat("#,##0.00");

        for (String s : categoryLimits) {
            String[] lineInfo = s.split("\t");
            String categoryName = lineInfo[0];
            double categoryLimit = Double.parseDouble(lineInfo[1]);

            totalBudgetLimit += categoryLimit;

            categoryLimitsOutput.add(categoryName + " --  $" + df.format(categoryLimit));
        }

        Collections.sort(categoryLimitsOutput);

        categoryLimitsOutput.add("----------");
        categoryLimitsOutput.add("Total: $" + df.format(totalBudgetLimit));

        String output = "";

        for (String s : categoryLimitsOutput) {
            output += s + "\n";
        }

        JOptionPane.showMessageDialog(null, output);
    }//GEN-LAST:event_viewLimitsButtonActionPerformed

    private void editLimitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editLimitButtonActionPerformed
        // TODO add your handling code here:
        String categoryName = "";
        getCategories();
        Collections.sort(categories);
        System.out.println("CATEGORIES: " + categories);
        if (categories == null) {
            JOptionPane.showMessageDialog(null, "Error 405");
            return;
        }

        //If no categories have been added, return
        if (categories.isEmpty()) {
            JOptionPane.showMessageDialog(null, "You have added no categories.");
            return;
        } else {
            //Convert categories array list to array
            String[] categoriesArr = new String[categories.size()];

            int index = 0;
            for (String s : categories) {
                categoriesArr[index] = s;
                index++;
            }

            //Ask for category
            Object[] categoriesObjArr = categoriesArr;
            Object selection = JOptionPane.showInputDialog(null,
                    "Select a Category to Edit the Limit", "Categories",
                    JOptionPane.INFORMATION_MESSAGE, null,
                    categoriesObjArr, categoriesObjArr[0]);
            categoryName = (String) selection;

            if (categoryName == null) {
                return;
            }
        }

        categoryName = categoryName.toUpperCase();

        double newLimit = 0.0;
        boolean foundCategory = false;
        int indexToRemove = 0;

        getCategoryLimits();

        DecimalFormat df1 = new DecimalFormat("$#,##0.00");

        System.out.println("CATEGORY LIMITS: " + categoryLimits);
        outer:
        for (String s : categoryLimits) {
            String[] lineInfo = s.split("\t");
            String category = lineInfo[0];
            String limit = lineInfo[1];

            if (category.equals(categoryName)) {
                foundCategory = true;
                while (true) {
                    String message = "Enter a new limit for " + categoryName + "\nCurrent Limit: " + df1.format(Double.valueOf(limit));
                    String input = JOptionPane.showInputDialog(message);
                    if (input == null)
                        return;
                    String tempFormatStr = "";
                    try {
                        tempFormatStr = df1.format(Double.parseDouble(input));
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, "Invalid limit. Please try again.");
                        continue;
                    }
                    if (input == null || tempFormatStr.equals(df1.format(Double.parseDouble(limit)))) {
                        return;
                    }
                    try {
                        newLimit = Double.parseDouble(input);
                        if (newLimit < 0.0) {
                            JOptionPane.showMessageDialog(null, "Limit must be greater than or equal to 0. Please try again.");
                            continue;
                        }
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, "Invalid limit. Please try again.");
                        continue;
                    }
                    break outer;
                }
            }
            indexToRemove++;
            System.out.println("INDEX TO REMOVE: " + indexToRemove);
        }

        if (!foundCategory) {
            JOptionPane.showMessageDialog(null, categoryName + " not found.");
            return;
        }

        //Remove old limit
        categoryLimits.remove(indexToRemove);

        //Format new limit
        DecimalFormat df = new DecimalFormat("0.00");
        String newLimitStr = df.format(newLimit);

        //Add new limit
        String newLine = categoryName + "\t" + newLimitStr;
        System.out.println("NEW LINE: " + newLine);
        categoryLimits.add(newLine);
        updateCategoryLimitsTextFile();
        String output = "New Limit Created For: " + categoryName + "\nNew Limit: " + df1.format(Double.valueOf(newLimitStr));
        JOptionPane.showMessageDialog(null, output);
    }//GEN-LAST:event_editLimitButtonActionPerformed

    private void findDuplicatesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findDuplicatesButtonActionPerformed
        // TODO add your handling code here:
        //Find duplicate transactions
        findDuplicateTransactions();
    }//GEN-LAST:event_findDuplicatesButtonActionPerformed

    private void importTipsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importTipsButtonActionPerformed
        // TODO add your handling code here:
        String message = "The Format for Importing is:\n"
                + "Date (tab) Description (tab) Amount (tab) Category\n"
                + "-------------------------\n"
                + "Date Format Example: Aug 10 2020\n"
                + "Description Format Example: Target\n"
                + "Amount Format Example: 17.45\n"
                + "Category Format Example: Shopping\n"
                + "-------------------------\n"
                + "NOTE: Each transaction must be on a separate line.\n"
                + "Each category must be added in settings for a transaction to be accepted. (Except for Income)\n"
                + "Each month must be added for a transaction to be accepted.";
        JOptionPane.showMessageDialog(null, message);
    }//GEN-LAST:event_importTipsButtonActionPerformed

    private void editCategoryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editCategoryButtonActionPerformed
        // TODO add your handling code here:
        /*String categoryToEdit = JOptionPane.showInputDialog("Enter the category you wish to edit:");
        if (categoryToEdit == null)
            return;
        categoryToEdit = categoryToEdit.toUpperCase();
        if (categoryToEdit.equals("")) {
            JOptionPane.showMessageDialog(null, "Invalid Input.");
            return;
        }
        getCategories();
        if (!categories.contains(categoryToEdit)) {
            JOptionPane.showMessageDialog(null, categoryToEdit + " not found.");
            return;
        }*/
        String categoryToEdit = "";
        getCategories();
        Collections.sort(categories);
        System.out.println("CATEGORIES: " + categories);
        if (categories == null) {
            JOptionPane.showMessageDialog(null, "Error 405");
            return;
        }

        //If no categories have been added, return
        if (categories.isEmpty()) {
            JOptionPane.showMessageDialog(null, "You have added no categories.");
            return;
        } else {
            //Convert categories array list to array
            String[] categoriesArr = new String[categories.size()];

            int index = 0;
            for (String s : categories) {
                categoriesArr[index] = s;
                index++;
            }

            //Ask for category
            Object[] categoriesObjArr = categoriesArr;
            Object selection = JOptionPane.showInputDialog(null,
                    "Select a Category to Edit", "Categories",
                    JOptionPane.INFORMATION_MESSAGE, null,
                    categoriesObjArr, categoriesObjArr[0]);
            categoryToEdit = (String) selection;

            if (categoryToEdit == null) {
                return;
            }
        }

        String newCategoryName = JOptionPane.showInputDialog("Enter the new name for category: " + categoryToEdit);
        if (newCategoryName == null) {
            return;
        }
        newCategoryName = newCategoryName.toUpperCase().trim();
        if (newCategoryName.equals("")) {
            JOptionPane.showMessageDialog(null, "Invalid input. Please try again.");
            return;
        }
        if (newCategoryName.equalsIgnoreCase(categoryToEdit)) {
            JOptionPane.showMessageDialog(null, "Invalid input. New category name cannot be the same as old category name.");
            return;
        }
        //Get old limit and update it for the new category name
        double categoryLimit = getCategoryLimit(categoryToEdit);
        if (categoryLimit == -1.0) {
            JOptionPane.showMessageDialog(null, "Error Updating Category Limit.");
            return;
        }
        String newLine = newCategoryName + "\t" + categoryLimit;
        categoryLimits.add(newLine);
        updateCategoryLimitsTextFile();

        //Everything is valid up to this point
        categories.remove(categoryToEdit);
        System.out.println("CATEGORIES: " + categories);
        removeCategoryLimit(categoryToEdit);
        updateCategoriesTextFile();
        System.out.println("CATEGORIES: " + categories);
        updateTransactionsWithCategory(categoryToEdit, newCategoryName);
        addCategory(newCategoryName, false);
        JOptionPane.showMessageDialog(null, categoryToEdit + " successfully changed to " + newCategoryName
                + "\nAll Transactions With the Old Category Name Have Been Changed to the New Category Name.");

    }//GEN-LAST:event_editCategoryButtonActionPerformed

    private void lightDarkModeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lightDarkModeButtonActionPerformed
        // TODO add your handling code here:
        if (isDarkMode) {
            displayLightMode();
        } else {
            displayDarkMode();
        }
        isDarkMode = !isDarkMode;
        prefs.putBoolean(DARK_MODE_PREF_KEY, isDarkMode);
    }//GEN-LAST:event_lightDarkModeButtonActionPerformed

    public void displayLightMode() {
        try {
            UIManager.setLookAndFeel(new FlatLightLaf());
            SwingUtilities.updateComponentTreeUI(this);
            if (isFrameVisible)
                lightDarkModeButton.setText("Dark Mode");
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(SettingsFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void displayDarkMode() {
        try {
            UIManager.setLookAndFeel(new FlatDarkLaf());
            SwingUtilities.updateComponentTreeUI(this);
            if (isFrameVisible)
                lightDarkModeButton.setText("Light Mode");
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(SettingsFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void findDuplicateTransactions() {
        try {
            Scanner sc = new Scanner(new File("months.txt"));

            ArrayList<String> transactions = new ArrayList<>();
            ArrayList<String> duplicateTransactions = new ArrayList<>();
            String line = "";
            while (sc.hasNextLine()) {
                line = sc.nextLine();
                //Look at lines with #
                if (line.charAt(0) == '#') {
                    //If the transaction is already added
                    if (transactions.contains(line)) {
                        //Add to duplicate transactions

                        //Remove # and end of line marker
                        String formattedLine = line.substring(1, line.length() - 1);
                        duplicateTransactions.add(formattedLine.replaceAll("\t", " "));
                    } else {
                        transactions.add(line);
                    }
                }
            }

            sc.close();

            if (duplicateTransactions.isEmpty()) {
                JOptionPane.showMessageDialog(null, "No duplicate transactions found.");
                return;
            }

            Collections.sort(duplicateTransactions);

            //Split up output dialogs
            int maxTransactionsInOutput = 20;

            int indexTracker = 0;

            int numDialogBoxes = duplicateTransactions.size() / maxTransactionsInOutput;

            for (int i = 0; i <= numDialogBoxes; i++) {
                String output = "Duplicate Transactions (" + (i + 1) + " of " + (numDialogBoxes + 1) + "):\n";

                try {
                    for (int j = 0; j < maxTransactionsInOutput; j++) {
                        output += duplicateTransactions.get(indexTracker) + "\n";
                        indexTracker++;
                    }
                } catch (IndexOutOfBoundsException e) {

                }
                JOptionPane.showMessageDialog(null, output);
            }
        } catch (FileNotFoundException ex) {
            System.out.println("File not found.");
        }
    }

    private double getCategoryLimit(String category) {
        getCategoryLimits();

        String categoryToFind = "";
        for (String s : categoryLimits) {
            String[] lineInfo = s.split("\t");
            String foundCategory = lineInfo[0];

            if (foundCategory.equals(category)) {
                return Double.parseDouble(lineInfo[1]);
            }
        }
        return -1.0;
    }

    private void removeCategoryLimit(String category) {
        getCategoryLimits();

        String categoryToRemove = "";
        for (String s : categoryLimits) {
            String[] lineInfo = s.split("\t");
            String foundCategory = lineInfo[0];

            if (foundCategory.equals(category)) {
                categoryToRemove = s;
            }
        }

        categoryLimits.remove(categoryToRemove);

        //Print new data
        updateCategoryLimitsTextFile();
    }

    private void updateCategoryLimitsTextFile() {
        try {
            PrintWriter printer = new PrintWriter(new File("categorylimits.txt"));

            for (String s : categoryLimits) {
                printer.println(s);
            }

            printer.close();
        } catch (FileNotFoundException ex) {
            System.out.println("File not found.");
        }
    }

    private void updateCategoriesTextFile() {
        try {
            PrintWriter printer = new PrintWriter(new File("categories.txt"));

            for (String s : categories) {
                printer.println(s);
            }

            printer.close();
        } catch (FileNotFoundException ex) {
            System.out.println("File not found.");
        }
    }

    private void getCategories() {
        try {
            Scanner sc = new Scanner(new File("categories.txt"));

            String line = "";
            categories.clear();
            while (sc.hasNextLine()) {
                line = sc.nextLine();
                categories.add(line);
            }

            sc.close();

        } catch (FileNotFoundException ex) {
            System.out.println("File not found.");
        }
    }

    private void addCategory(String newCategory, boolean addLimit) {
        try {
            getCategories();
            PrintWriter printer = new PrintWriter(new File("categories.txt"));

            //Print previous categories
            for (String s : categories) {
                printer.println(s);
            }

            //Add new category
            printer.println(newCategory);

            printer.close();

            if (addLimit) {
                //Print category limits
                getCategoryLimits();

                PrintWriter printer2 = new PrintWriter(new File("categorylimits.txt"));

                for (String s : categoryLimits) {
                    printer2.println(s);
                }

                printer2.println(newCategory + "\t" + defaultLimit);

                printer2.close();
            }

        } catch (FileNotFoundException ex) {
            System.out.println("File not found.");
        }
    }

    /**
     * This method retrieves the limits for each category
     */
    private void getCategoryLimits() {
        try {
            Scanner sc = new Scanner(new File("categorylimits.txt"));

            String line = "";
            categoryLimits.clear();
            while (sc.hasNextLine()) {
                line = sc.nextLine();
                categoryLimits.add(line);
            }

            sc.close();
        } catch (FileNotFoundException ex) {
            System.out.println("File not found.");
        }
    }

    /**
     * This method changes any transaction with a removed category to the passed
     * in category
     *
     * @param categoryName
     */
    private void updateTransactionsWithCategory(String categoryName, String newCategoryName) {

        try {
            Scanner sc = new Scanner(new File("months.txt"));

            String line = "";
            ArrayList<String> lines = new ArrayList<>();
            while (sc.hasNextLine()) {
                line = sc.nextLine();

                //Look at transaction lines only
                //Lines with #
                if (line.charAt(0) == '#') {
                    String[] transactionInfo = line.split("\t");
                    String date = transactionInfo[0];
                    String transactionName = transactionInfo[1];
                    String amount = transactionInfo[2];
                    String foundCategory = transactionInfo[3];
                    String marker = transactionInfo[4];

                    if (marker.equals("1")) {
                        if (foundCategory.equals(categoryName)) {
                            //Change this line
                            String formattedLine = date + "\t" + transactionName + "\t"
                                    + amount + "\t" + newCategoryName + "\t"
                                    + marker;

                            //Add marker 1 lines matching category
                            lines.add(formattedLine);
                        } else {
                            //Add marker 1 lines not matching category
                            lines.add(line);
                        }
                    } else {
                        //Add marker 2
                        lines.add(line);
                    }
                } else {
                    //Add months
                    lines.add(line);
                }
            }

            sc.close();

            PrintWriter printer = new PrintWriter(new File("months.txt"));

            for (String s : lines) {
                printer.println(s);
            }

            printer.close();
        } catch (FileNotFoundException ex) {
            System.out.println("File not found.");
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addCategoryButton;
    private javax.swing.JButton editCategoryButton;
    private javax.swing.JButton editLimitButton;
    private javax.swing.JButton exitButton;
    private javax.swing.JButton findDuplicatesButton;
    private javax.swing.JButton importTipsButton;
    private javax.swing.JButton lightDarkModeButton;
    private javax.swing.JButton removeCategoryButton;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JButton viewCategoriesButton;
    private javax.swing.JButton viewLimitsButton;
    // End of variables declaration//GEN-END:variables
}
