/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package budgetgui;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Toolkit;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Scanner;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/**
 *
 * @author jgower17
 */
public class YearFrame extends javax.swing.JFrame {

    private ArrayList<String> textFileNames = new ArrayList<>();
    private ArrayList<String> foundYears = new ArrayList<>();

    /**
     * Creates new form YearFrame
     */
    public YearFrame() {
        initComponents();

        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(dim.width / 2 - this.getSize().width / 2, dim.height / 2 - this.getSize().height / 2);

        this.setVisible(true);
        this.setTitle("Budget Tracker");
        this.setResizable(false);

        textFileNames.add("categories.txt");
        textFileNames.add("categorylimits.txt");
        textFileNames.add("months.txt");
        textFileNames.add("years.txt");
        textFileNames.add("recurring.txt");

        initTextFiles();

        updateList();

        removeYearButton.setEnabled(false);
        viewYearButton.setEnabled(false);
        
        this.foundYears = getSavedYears();

        yearsList.addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (!e.getValueIsAdjusting()) {
                    removeYearButton.setEnabled(true);
                    viewYearButton.setEnabled(true);
                }
            }
        });
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        yearsList = new javax.swing.JList<>();
        viewYearButton = new javax.swing.JButton();
        addYearButton = new javax.swing.JButton();
        removeYearButton = new javax.swing.JButton();
        titleLabel = new javax.swing.JLabel();
        settingsButton = new javax.swing.JButton();
        searchButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        yearsList.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jScrollPane1.setViewportView(yearsList);

        viewYearButton.setText("View Year");
        viewYearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewYearButtonActionPerformed(evt);
            }
        });

        addYearButton.setText("Add Year");
        addYearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addYearButtonActionPerformed(evt);
            }
        });

        removeYearButton.setText("Remove Year");
        removeYearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeYearButtonActionPerformed(evt);
            }
        });

        titleLabel.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        titleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleLabel.setText("Years");

        settingsButton.setText("Settings");
        settingsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                settingsButtonActionPerformed(evt);
            }
        });

        searchButton.setText("Search Transactions");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(titleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jScrollPane1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addYearButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(removeYearButton, javax.swing.GroupLayout.DEFAULT_SIZE, 266, Short.MAX_VALUE)
                    .addComponent(settingsButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(viewYearButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(searchButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(titleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(settingsButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addYearButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removeYearButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(viewYearButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchButton)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void initTextFiles() {
        for (String s : textFileNames) {
            try {
                Scanner sc = new Scanner(new File(s));
                sc.close();
                System.out.println("FILE FOUND FOR: " + s);
            } catch (FileNotFoundException e) {
                try {
                    PrintWriter printer = new PrintWriter(new File(s));
                    //Add default categories for categories.txt and categorylimits.txt
                    String[] defaultCategories = {"CAR MAINTENANCE", "CC ANNUAL FEE", "DINING", "ENTERTAINMENT", "GAS",
                        "GROCERY", "HOUSING", "INTERNET", "INVESTMENTS", "OTHER", "PHONE", "RETIREMENT", "SHOPPING", "TRAVEL"};
                    if (s.equals("categories.txt")) {
                        for (String s2 : defaultCategories) {
                            printer.println(s2);
                        }
                    }
                    if (s.equals("categorylimits.txt")) {
                        for (String s3 : defaultCategories) {
                            printer.println(s3 + "\t0.0");
                        }
                    }
                    System.out.println("NEW FILE CREATED FOR: " + s);
                    printer.close();
                } catch (FileNotFoundException ex) {
                    System.out.println("UNABLE TO CREATE NEW FILE FOR: " + s);
                }
            }
        }
    }

    private void addYearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addYearButtonActionPerformed
        // TODO add your handling code here:
        //Ask for year to be added
        while (true) {
            String input = JOptionPane.showInputDialog("Enter a year:");
            if (input == null) {
                return;
            }
            int year = 0;
            try {
                year = Integer.parseInt(input);
                if (year < 0) {
                    JOptionPane.showMessageDialog(null, "Invalid input. Please try again.");
                    continue;
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Invalid input. Please try again.");
                continue;
            }
            ArrayList<String> savedYears = getSavedYears();
            if (!savedYears.contains(Integer.toString(year))) {
                addYearToYearsFile(Integer.toString(year));
                this.foundYears = getSavedYears();
                JOptionPane.showMessageDialog(null, year + " successfully added.");
                break;
            } else {
                JOptionPane.showMessageDialog(null, "Error: " + year + " already added. Please try again.");
                continue;
            }
        }
    }//GEN-LAST:event_addYearButtonActionPerformed

    private void removeYearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeYearButtonActionPerformed
        // TODO add your handling code here:
        if (yearsList.isSelectionEmpty()) {
            return;
        }
        String selectedYear = yearsList.getSelectedValue();
        //Ask for confirmation
        String input = JOptionPane.showInputDialog("Are you sure you want to delete the year " + selectedYear + "?\n"
                + "This action will permanently delete all transactions\n"
                + "associated with this year.\n\n"
                + "Type Yes to DELETE this year.\n"
                + "Type No or Press Cancel to KEEP this year.");
        if (input == null) {
            return;
        }
        if (input.equalsIgnoreCase("yes")) {
            //Delete the year and all of its transactions
            deleteAllTransactionsFromYear(selectedYear);
            //Remove year from years.txt file
            removeYearFromYearsFile(selectedYear);
            //Update list
            updateList();
            //Update foundYears
            this.foundYears = getSavedYears();

            //Disable remove/view year buttons since nothing on list will be selected
            removeYearButton.setEnabled(false);
            viewYearButton.setEnabled(false);
        }

    }//GEN-LAST:event_removeYearButtonActionPerformed

    private void viewYearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewYearButtonActionPerformed
        // TODO add your handling code here:
        if (yearsList.isSelectionEmpty()) {
            return;
        }
        this.dispose();
        MainFrame mainFrame = new MainFrame(yearsList.getSelectedValue(), foundYears);
    }//GEN-LAST:event_viewYearButtonActionPerformed

    private void settingsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_settingsButtonActionPerformed
        // TODO add your handling code here:
        this.dispose();
        SettingsFrame settingsFrame = new SettingsFrame();
    }//GEN-LAST:event_settingsButtonActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        // TODO add your handling code here:
        this.dispose();
        SearchFrame searchFrame = new SearchFrame(null, false, foundYears);
    }//GEN-LAST:event_searchButtonActionPerformed

    private void updateList() {
        ArrayList<String> savedYears = getSavedYears();
        Collections.sort(savedYears);
        int index = 0;
        String[] listArr = new String[savedYears.size()];
        for (String s : savedYears) {
            listArr[index] = s;
            index++;
        }
        yearsList.setListData(listArr);
    }

    private ArrayList<String> getSavedYears() {
        try {
            Scanner sc = new Scanner(new File("years.txt"));
            String line = "";
            ArrayList<String> savedYears = new ArrayList<>();
            while (sc.hasNextLine()) {
                savedYears.add(sc.nextLine());
            }
            sc.close();
            return savedYears;
        } catch (FileNotFoundException ex) {

        }
        return null;
    }

    private void addYearToYearsFile(String newYear) {
        ArrayList<String> previousYears = getSavedYears();
        try {
            PrintWriter printer = new PrintWriter(new File("years.txt"));
            for (String s : previousYears) {
                printer.println(s);
            }
            printer.println(newYear);
            printer.close();
        } catch (FileNotFoundException ex) {

        }
        updateList();
    }

    private void removeYearFromYearsFile(String yearToRemove) {
        try {
            Scanner sc = new Scanner(new File("years.txt"));
            String line = "";
            ArrayList<String> yearsToSave = new ArrayList<>();
            while (sc.hasNextLine()) {
                line = sc.nextLine();
                if (!line.equals(yearToRemove)) {
                    yearsToSave.add(line);
                }
            }
            sc.close();

            PrintWriter printer = new PrintWriter(new File("years.txt"));
            for (String s : yearsToSave) {
                printer.println(s);
            }
            printer.close();
        } catch (FileNotFoundException ex) {

        }

    }

    private void deleteAllTransactionsFromYear(String year) {
        try {
            Scanner sc = new Scanner(new File("months.txt"));
            String line = "";
            ArrayList<String> linesToKeep = new ArrayList<>();
            while (sc.hasNextLine()) {
                line = sc.nextLine();
                //Two types of lines - with or without # as the 1st char
                if (line.charAt(0) != '#') {
                    String[] lineInfo = line.split("\t");
                    String yearFound = lineInfo[1];
                    if (!yearFound.equals(year)) {
                        linesToKeep.add(line);
                    }
                } else {
                    String[] lineInfo = line.split("\t");
                    String[] dateInfo = lineInfo[0].split(" ");
                    String yearFound = dateInfo[2];
                    if (!yearFound.equals(year)) {
                        linesToKeep.add(line);
                    }
                }

            }
            System.out.println("SCANNER CLOSED");
            sc.close();

            PrintWriter printer = new PrintWriter(new File("months.txt"));
            for (String s : linesToKeep) {
                printer.println(s);
            }
            printer.close();

        } catch (FileNotFoundException ex) {

        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addYearButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton removeYearButton;
    private javax.swing.JButton searchButton;
    private javax.swing.JButton settingsButton;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JButton viewYearButton;
    private javax.swing.JList<String> yearsList;
    // End of variables declaration//GEN-END:variables
}
